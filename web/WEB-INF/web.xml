<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--在servlet标签配置servlet的类信息:告诉服务器有这个servlet-->
    <servlet>
        <!--配置servlet的名字:相当于给servlet类起别名    给程序员看的-->
        <servlet-name>MyFirstServlet</servlet-name>
        <!--配置servlet类的全名	给服务器看:服务器通过全类名找到MyFirstServlet-->
        <servlet-class>com.servlet.MyFirstServlet</servlet-class>
    </servlet>
    <!--servlet映射信息,也这是servlet用来处理哪一个请求-->
    <servlet-mapping>
        <!--刚才配置的servlet的别名-->
        <servlet-name>MyFirstServlet</servlet-name>

        <!--告诉服务器处理这个servlet(MyFirstServlet用来处理哪个请求)   http://localhost:8080/javaweb/first-->
        <!--表示就是访问当前项目下的/first-->
        <url-pattern>/first</url-pattern>
    </servlet-mapping>

    <!--生命周期-->
    <servlet>
        <servlet-name>HelloServlet</servlet-name>
        <servlet-class>com.servlet.HelloServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloServlet</servlet-name>
        <!--
          url:资源定位符
                 静态资源,实际的文件 .html .css .png
                 动态资源 请求动态资源是启动一段程序来处理
      -->
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>

    <!--ServletConfig-->
    <servlet>
        <servlet-name>ConfigServlet</servlet-name>
        <servlet-class>com.servlet.ConfigServlet</servlet-class>
        <init-param>
            <param-name>username</param-name>
            <param-value>李四</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>ConfigServlet</servlet-name>
        <url-pattern>/config</url-pattern>
    </servlet-mapping>

    <!--ServletContext-->
    <servlet>
        <servlet-name>ContextServlet</servlet-name>
        <servlet-class>com.servlet.ContextServlet</servlet-class>
        <!--配置Servlet的初始化参数-->
        <init-param>
            <param-name>username</param-name>
            <param-value>王五</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>ContextServlet</servlet-name>
        <url-pattern>/context</url-pattern>
    </servlet-mapping>
    <!--配置WEB项目的初始化参数-->
    <context-param>
        <param-name>user</param-name>
        <param-value>张三</param-value>
    </context-param>
    <context-param>
        <param-name>javax.faces.CONFIG_FILES</param-name>
        <param-value>/META-INF/context.xml,/context.xml</param-value>
    </context-param>

    <!--HttpServletResponse-->
    <servlet>
        <servlet-name>MyHttpResponseServlet</servlet-name>
        <servlet-class>com.servlet.MyHttpResponseServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>MyHttpResponseServlet</servlet-name>
        <url-pattern>/myhttp</url-pattern>
    </servlet-mapping>

    <!--HttpServletRequest-->
    <servlet>
        <servlet-name>MyHttpRequestServlet</servlet-name>
        <servlet-class>com.servlet.MyHttpRequestServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>MyHttpRequestServlet</servlet-name>
        <url-pattern>/myhttprequest</url-pattern>
    </servlet-mapping>

    <!--转发和重定向-->
    <servlet>
        <servlet-name>ForwardAndRedirectServlet</servlet-name>
        <servlet-class>com.servlet.ForwardAndRedirectServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ForwardAndRedirectServlet</servlet-name>
        <url-pattern>/far</url-pattern>
    </servlet-mapping>
    
    <!--页面乱码问题-->
    <servlet>
        <servlet-name>EncodingServlet</servlet-name>
        <servlet-class>com.servlet.EncodingServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>EncodingServlet</servlet-name>
        <url-pattern>/encoding</url-pattern>
    </servlet-mapping>
    
    <!--POST和GET乱码问题-->
    <servlet>
        <servlet-name>EncodingPostAndGetServlet</servlet-name>
        <servlet-class>com.servlet.EncodingPostAndGetServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>EncodingPostAndGetServlet</servlet-name>
        <url-pattern>/encodingpostandget</url-pattern>
    </servlet-mapping>
    
    <!--项目的路径问题-->
    <servlet>
        <servlet-name>PathServlet</servlet-name>
        <servlet-class>com.servlet.PathServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>PathServlet</servlet-name>
        <url-pattern>/path</url-pattern>
    </servlet-mapping>
    
    
    <!--Cookie-->
    <servlet>
        <servlet-name>CookieServlet</servlet-name>
        <servlet-class>com.servlet.CookieServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CookieServlet</servlet-name>
        <url-pattern>/cookie</url-pattern>
    </servlet-mapping>
    
    <!--Sesseion-->
    <servlet>
        <servlet-name>SessionServlet</servlet-name>
        <servlet-class>com.servlet.SessionServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SessionServlet</servlet-name>
        <url-pattern>/session</url-pattern>
    </servlet-mapping>

    <!--<session-config>
        <session-timeout>1</session-timeout>
    </session-config>-->
    
    <servlet>
        <servlet-name>Kaptcha</servlet-name>
        <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
        <!--初始化验证码参数-->
        <!--配置验证图片宽度-->
        <init-param>
            <param-name>kaptcha.image.width</param-name>
            <param-value>200</param-value>
        </init-param>
        <!--配置验证图片高-->
        <init-param>
            <param-name>kaptcha.image.height</param-name>
            <param-value>100</param-value>
        </init-param>
        <!--配置文本长度-->
        <init-param>
            <param-name>kaptcha.textproducer.char.length</param-name>
            <param-value>4</param-value>
        </init-param>
        <!--配置文本集合，验证码值从此集合中获取(如果使用中文验证码,必须配置字体,否则会出现乱码)-->
        <init-param>
            <param-name>kaptcha.textproducer.char.string</param-name>
            <param-value>一二三四五六七八九</param-value>
        </init-param>
        <!--配置使用字体-->
        <init-param>
            <param-name>kaptcha.textproducer.font.names</param-name>
            <param-value>宋体</param-value>
        </init-param>
    </servlet>
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Kaptcha</servlet-name>
        <url-pattern>/kaptcha</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.xhtml</url-pattern>
    </servlet-mapping>


    <!--配置Filter类信息-->
    <filter>
        <!--Filter别名-->
        <filter-name>HelloFilter</filter-name>
        <!--Filter全类名-->
        <filter-class>com.filter.HelloFilter</filter-class>
    </filter>
    <!--Filter的映射信息-->
    <filter-mapping>
        <!--指定Filter-->
        <filter-name>HelloFilter</filter-name>
        <!--过滤请求-->
        <url-pattern>/jsp/filter.jsp</url-pattern>
    </filter-mapping>

    <!--测试Filter 链-->
    <filter>
        <filter-name>BFilter</filter-name>
        <filter-class>com.filter.BFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>BFilter</filter-name>
        <!--精准匹配(指定要拦截的页面)-->
        <!-- <url-pattern>/jsp/filter.jsp</url-pattern>-->
        <!--路径匹配(拦截路径jsp下的所有页面)-->
        <!--<url-pattern>/jsp/*</url-pattern>-->
        <!--模型匹配(拦截所有.jsp的页面)-->
        <!-- <url-pattern>*.jsp</url-pattern>-->
        <!--拦截静态资源(拦截jpg图片)-->
        <!--<url-pattern>*.jpg</url-pattern>-->
        <url-pattern>/jsp/404.jsp</url-pattern>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>

    <!--配置Filter url-pattern配置-->
    <filter>
        <filter-name>AFilter</filter-name>
        <filter-class>com.filter.AFilter</filter-class>
        <init-param>
            <param-name>username</param-name>
            <param-value>李四</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>AFilter</filter-name>
        <!--精准匹配(指定要拦截的页面)-->
       <!-- <url-pattern>/jsp/filter.jsp</url-pattern>-->
        <!--路径匹配(拦截路径jsp下的所有页面)-->
      <!--<url-pattern>/jsp/*</url-pattern>-->
        <!--模型匹配(拦截所有.jsp的页面)-->
       <!-- <url-pattern>*.jsp</url-pattern>-->
        <!--拦截静态资源(拦截jpg图片)-->
        <!--<url-pattern>*.jpg</url-pattern>-->
        <url-pattern>/jsp/filter2.jsp</url-pattern>
    </filter-mapping>

    <!--定义全局错误页面-->
    <error-page>
        <error-code>500</error-code>
        <location>/jsp/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/jsp/404.jsp</location>
    </error-page>

    <!--配置全局监听器-->
    <listener>
        <!--配置全类名-->
        <listener-class>com.listener.RequestLifeListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.listener.ApplicationLifeListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.listener.SessionLifeListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.listener.RequestAttributeListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.listener.ContextAttributeListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.listener.SessionAttrButeListener</listener-class>
    </listener>
</web-app>